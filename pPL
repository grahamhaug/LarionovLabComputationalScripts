#pPL - program ProcessLog
#v1.3
#GCH - 4/24/20
#Last Modified - 12/16/20

### DESCRIPTION ###
#This script will run pSI, pGV and pXYZ on input.log files
#In the case of single experiments (opt+freq), you will get one progSI output.
#In the case of multiple experiments (like --link1-- sequential TSS opts) you will get multiple SI outputs in one SI 

### USAGE ###
#To use, navigate to the directory where your .log file is located
#type "progProc YourLog.log" and press enter. Your output should be one YourLog-si.txt file and one YourLog.XYZ. If a freq output was found, a YourLog-gv.txt as well.

#Future updates:
#Add means to calculate the time cost of each experiment

### POINT TO SCRIPTS DIRECTORY ###
shopt -s expand_aliases
#You will need to point this as where your scripts are
source /home1/.../scripts/alii.env

### COLORS FOR FORMATTING ###
RED='\033[0;31m'
GREEN='\033[0;32m'
PURP='\033[1;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

### PRINT JOB HEADER ###
echo ""
echo "-----------------------------------------------------------------"
echo "                          pProcessLog                            "
echo "-----------------------------------------------------------------"

### JOB NAMES ###
#get the name of the original filename.log you are running progSI on, regardless of extension
fullInput=$(basename "$1")
jobName="${fullInput%.*}"

### BACKUP, IF -SI EXISTS ###
#Check if there is already a Master-si.txt file for your targeted filename.log; back original up if extant
if [ -f "./${jobName}-si.txt" ]; then
        mv ./${jobName}-si.txt ./${jobName}-si.txt.bak
fi

### CREATE TEMP DIRECTORY ###        
#make a directory to house the temp files-the chunked SmallerX.log files - if it doesn't exist
if [ ! -d "./tempstorage" ]; then
        mkdir ./tempstorage
fi

### DETERMINE THE NUMBER OF JOBS CONTAINED IN JOBNAME.LOG ###
# All jobs end the same way: "Normal termination" - For 1 opt/freq this program would count 1 start but 2 stops. For a SP it would count 1 start and 1 stop.
startJobs=$(awk '/Initial command:/ {print FNR}' ${jobName}.log | tr '\n\r' ' ')
IFS=' ' read -r -a startArray <<< "$startJobs"
endJobs=$(awk '/Normal termination/ {print FNR}' ${jobName}.log | tr '\n\r' ' ') 
IFS=' ' read -r -a endArray <<< "$endJobs"
# Ratio of starts/stops determines how many jobs there are total
startCount="${#startArray[@]}"
endCount="${#endArray[@]]}"

#Give the user some feedback
echo ""
echo -e "${CYAN}Reading job data in ${GREEN}${jobName}.log${CYAN}...${NC}"

if [ "$startCount" -eq 1 ] && [ "$endCount" -eq 1 ]; then
	echo -e "${jobName}.log ${CYAN}contains one single point job.${NC}" 
	echo ""
	for (( i=0; i<$startCount; i++ ))
		do
			startVar=${startArray[i]}
			endVar=${endArray[i]}
			sed -n "${startVar}, ${endVar}p" ${jobName}.log > ./tempstorage/${jobName}${i}.log
		done
#there may be paired start/stops (equal #) but there may be more than 1 (multiple sequential single points)
elif [ "$startCount" -gt 1 ] && [ "$endCount" -eq "$startCount" ]; then
        echo -e "${jobName}.log ${CYAN}contains multiple single point jobs.${NC}"
	echo ""
	for (( i=0; i<$startCount; i++ ))
        do
                startVar=${startArray[i]}
                endVar=${endArray[i]}
                sed -n "${startVar}, ${endVar}p" ${jobName}.log > ./tempstorage/${jobName}${i}.log
		done
#there may be 2x the ends as there are beginnings - this is in the case of multiple opt/freqs where each job contains 2 ends but only 1 'initial command: start'
else
	#Check if Ends contains twice the number as Start - link1 multijob inputs 
	j=1
	echo -e "${jobName}.log ${CYAN}contains multiple subjobs.${NC}"
	echo ""
	for (( i=0; i<$startCount; i++ ))
		do
			startVar=${startArray[i]}
			endVar=${endArray[j]}
			sed -n "${startVar}, ${endVar}p" ${jobName}.log > ./tempstorage/${jobName}${i}.log
			(( j+=2 ))
		done	 
fi 

#count the number of .log files in tempdirectory
numFiles=(./tempstorage/*)

### IF MULTIPLE SUBJOBS, PROCESS EACH SUBJOB ###
if [ ${#numFiles[@]} -gt 1 ]; then
	for subJob in ./tempstorage/*.log
		do
			### RUN pXYZ IF OPTIMIZED GEOMETRY IS FOUND ###
			existCoord=$(grep "Redundant internal" $subJob)   
			if [ -n "$existCoord" ]; then 
				progSI $subJob >> ./${jobName}-si.txt
				progXYZ $subJob > ./${jobName}-${i}.xyz
			else 
				progSI $subJob >> ./${jobName}-si.txt
				printf "\n***Job End***\n\n" >> ./${jobName}-si.txt
			fi
			
			### RUN GOODVIBES IF FREQUENCY DATA IS FOUND ###
			thermoCount=$(grep -c "Thermochemistry" $subJob)
			if [ "$thermoCount" -ge 1 ]; then
				echo -e "${CYAN}Thermochemistry data found; Running GoodVibes.${NC}"				
				progGV $subJob > ./${jobName}-gv.txt
			fi
			
			### DIVIDE JOB OUTPUTS WITH A FOOTER ###
 			printf "\n***Job End***\n\n" >> ./${jobName}-si.txt
			
			unset existCoord
        	done
		
### IF ONE SUBJOB, PROCESS THE SUBJOB ###
else
	for subJob in ./tempstorage/*.log
		do
			progSI $subJob > ./${jobName}-si.txt
			progXYZ $subJob > ./${jobName}.xyz
		
			### RUN GOODVIBES IF FREQUENCY DATA IS FOUND ###
			thermoCount=$(grep -c "Thermochemistry" $subJob)
			if [ "$thermoCount" -ge 1 ]; then
				echo -e "${CYAN}Thermochemistry data found; Running GoodVibes.${NC}"
				progGV $subJob > ./${jobName}-gv.txt
			fi
		done
fi

#yeet the tempstorage directory into oblivion after we are done
rm -rf tempstorage

echo -e "${GREEN}		-- Done! --${NC}"



