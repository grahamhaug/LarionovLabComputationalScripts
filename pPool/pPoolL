#!/bin/bash
#pPool
#v1.3
#GCH - 1/26/21
#Last Modified - 4/10/21

### DESCRIPTION AND USE ###
#Sends an exampleJob.com to the user-specified jobPool directory for autonomous submission by qManager (makes the job available to run automatically)
#Creates a SBATCH submission script to accompany exampleJob.com
#qManager determines the nextJob to run next (based on priority etc) from the jobPool directory and submits the SBATCH file corresponding to exampleJob.com
#Use with 'pPool exampleJob' - no need for extension
#You need to have the accompanying 'g16_SBATCH_template.txt' file stored in your $Home/scripts/ folder

### TO DO ###
#if user wants to submit many similar jobs, ex: exampleJob{1..16}.com, don't make them input specs for each job; do it once and copy to other jobs
#this will have to be an added option, somehow, while still saving time

### SET jobPool DIRECTORY LOCATION ###
jobPool=/work2/05793/rdg758/stampede2/jobPool

### SPECIFY LOCATION OF sbatchTemplate.sh FILE ###
sbatchTemplate=/home/05793/rdg758/scripts/g16_SBATCH_template.txt

### POINT TO SCRIPTS DIRECTORY ###
shopt -s expand_aliases
#You will need to point this as where your scripts are
source /home1/05793/rdg758/scripts/alii.env

### COLORS FOR FUN FORMATTING ###
RED='\033[0;31m'
GREEN='\033[0;32m'
PURP='\033[1;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

### PRINT JOB HEADER ###
echo ""
echo "-----------------------------------------------------------------"
echo "                              pPool                              "
echo "-----------------------------------------------------------------"

### JOB NAMES AND CURRENT DIRECTORY ###
#Capture the name of the job to be sent
fullInput=$(basename "$1")
jobName="${fullInput%.*}"

#capture the current directory to send job output
returnDir=$(pwd)
export RETURNDIR=${returnDir}

#sends exampleJob.com and exampleJob SBATCH to jobPool directory 
function sendPool {
	cp ${jobName}.com $jobPool
	cp ${jobName} $jobPool
}

#parses a user-specified range
function cleanRange {
        IFS=', ' read -a ranges <<< "$*"
        for range in "${ranges[@]}"; do
		IFS=- read start end <<< "$range"
                [ -z "$start" ] && continue
                [ -z "$end" ] && end=$start
                for (( i=start ; i <= end ; i++ )); do
			echo "$i"
		done
	done
}

#captures user-specified job parameters for template substitution
function makeSBATCH {
		echo ""
		
		# which queue to run on
		queueQ=$(echo -e "${GREEN}Which queue to use?$   ${NC}")
		queueOptions=("Normal" "SKX-Normal")
		PS3=$queueQ
		COLUMNS=0
		select qCase in "${queueOptions[@]}"; do 
			case $REPLY in
				1) #Normal
					export WHICHQ=normal
					export NUMCORE=1
					export NUMTASK=64
					echo -e "${GREEN}Using queue: ${CYAN}Normal${NC}\n"
					#debug
					#echo "Cores: $NUMCORE Tasks: $NUMTASK"
					break;;

				2) #SKX-Normal
					export WHICHQ=skx-normal
					export NUMCORE=1
					export NUMTASK=48
					echo -e "${GREEN}Using queue: ${CYAN}SKX${NC}\n"
					#debug
					echo "Cores: $NUMCORE Tasks: $NUMTASK"
					break;;

				*) #Error Catch
					echo -e "${RED}Error: ${NC} select Normal or SKX...\n"
					continue;;
			esac
		done
		#debug
		#echo "using queue: $WHICHQ"

		### USER SELECTS TIME ###
		#hours to run
		echo -e "${GREEN}How long to run the job? ${NC}"
		hoursQuestion=$(echo -e "Hours? ")
		while [ -z "$hours" ]; do
			read -ep "$hoursQuestion" ans	
				if [[ ! $ans =~ ^[0-9]+$ ]] ; then
					echo -e "${RED}Error:${NC} Must enter an integer." >&2
				else 
					export hours=$ans
				fi
			done		

		minsQuestion=$(echo -e "Minutes? ")
		while [ -z "$mins" ]; do
			read -ep "$minsQuestion" minutes	
				if [[ ! $minutes =~ ^[0-9]+$ ]] ; then
					echo -e "${RED}Error:${NC} Must enter an integer." >&2
				else 
					export mins=$minutes
				fi
		done		
		echo -e "${GREEN}Requesting: ${CYAN}$hours ${GREEN}hours ${CYAN}$mins ${GREEN}minutes.${NC}\n"
		export HOURS=${hours}
		export MINS=${mins}		
		#debug
		#echo "time requested: $HOURS:$MINS"

		#store the current allocations' fairshares
		fsKinetics=$(fairshare | awk 'FNR == 8 {print $7}')
		fsMech=$(fairshare | awk 'FNR == 10 {print $7}')
		fsComp=$(fairshare | awk 'FNR == 4 {print $7}')
		fsExcited=$(fairshare | awk 'FNR == 6 {print $7}')
		fsSOCI=$(fairshare | awk 'FNR == 12 {print $7}')

		# User indicates which allocation to use
		alloQ=$(echo -e "${GREEN}Which allocation to use?$  ${NC}")
		#can add or remove active allocations here
		alloOptions=("($fsKinetics) Kinetics-of-selectiv" "($fsMech) Mechanistic-Studies" "($fsComp) Computational-Analys" "($fsExcited) Excited-state-reactiv" 
		"($fsSOCI) SOCI-Xmers")
		PS3=$alloQ
		COLUMNS=0
		select allocation in "${alloOptions[@]}"; do 
			case $REPLY in
				1) #Kinetics-of-selectiv
					export ALLOCATION='Kinetics-of-selectiv'
					echo -e "${GREEN}Using allocation: ${CYAN}Kinetics-of-selectiv${NC}\n"
					break;;

				2) #Mechanistic-Studies
					export ALLOCATION='Mechanistic-Studies'
					echo -e "${GREEN}Using allocation: ${CYAN}Mechanistic-Studies${NC}\n"
					break;;

				3) #Computational-Analys
					export ALLOCATION='Computational-Analys'
					echo -e "${GREEN}Using allocation: ${CYAN}Computational-Analys${NC}\n"
					break;;

				4) #Excited-state-reacti
					export ALLOCATION='Excited-state-reacti'
					echo -e "${GREEN}Using allocation: ${CYAN}Excited-state-reacti${NC}\n"
					break;;

				5) #SOCI-Xmers
					export ALLOCATION='SOCI-Xmers'
					echo -e "${GREEN}Using allocation: ${CYAN}SOCI-Xmers${NC}\n"
					break;;

				*) #Error Catch
					echo -e "${RED}Error: ${NC} select available allocation...\n"
					continue;;
			esac
		done
		#debug
		#echo "using allocation $ALLOCATION"
}

# pPool a single job or a range of jobs?
echo ""
numQ=$(echo -e "${GREEN}Submit a single job or range of jobs?$   ${NC}")
jobOptions=("Single job" "Range (ex: job-conf{1..10}.com)" "Launcher (ex: one job Trojaning many subjobs)")
PS3=$numQ
COLUMNS=0
select numCase in "${jobOptions[@]}"; do
	case $REPLY in
		1) #single job
			echo -e "${GREEN}Submitting a single job.${NC}"
			makeSBATCH
			envsubst '${WHICHQ} ${HOURS} ${MINS} ${ALLOCATION} ${RETURNDIR} ${NUMCORE} ${NUMTASK}' </home1/05793/rdg758/scripts/g16_SBATCH_template.txt> ./$jobName
			sendPool
			echo ""
			echo -e "${CYAN}$jobName ${GREEN}sent to jobPool.${NC}"
			echo ""
			sbatch $jobName
			break;;

		2) #range of jobs
			echo -e "${GREEN}Submitting a range of jobs.${NC}"
			#get an array of jobs to make
			userRange=$(echo -e "${GREEN}Enter the job range ${NC}: ")
			read -ep "$userRange" jobRange
			cleanedRange=($(cleanRange $jobRange))
			#make sure the user-defined range is in ascending order
			IFS=$'\n' sortedRange=($(sort -n <<< "${cleanedRange[*]}"))
			unset IFS

			#get the base name of the job (minus any ending #s)
			#ex: job-conf1.com .. job-conf10.com <= need to pull "job-conf"
			noNum=$(echo "$jobName" | sed 's/[0-9]*$//' | tr -d '[:space:]')
			#for debug
			echo $noNum


			#ask for settings for the first job
			echo -e "\n${GREEN}Enter common job parameters.${NC}"	
			makeSBATCH
			#now we have captured env variables that will be applied to all of the jobs in the user's range
			
			#for debug
			#echo "debug"
			#for i in "${sortedRange[@]}"; do
			#	echo $i
			#done
	
			#declare an array for jobs to submit 
			declare -a jobstoSubmit
	
			#make an sbatch file for each entry in the range
			for num in "${sortedRange[@]}"; do 
				jobName=${noNum}${num}
				envsubst '${WHICHQ} ${HOURS} ${MINS} ${ALLOCATION} ${RETURNDIR} ${NUMCORE} ${NUMTASK}' </home1/05793/rdg758/scripts/g16_SBATCH_template.txt> ./$jobName
				sendPool
				jobstoSubmit+=("$jobName")
					
				#temporarily autosubmit

                        	echo -e "${CYAN}$jobName ${GREEN}sent to jobPool.${NC}"
			done
			cd $jobPool
			for f in "${jobstoSubmit[@]}"; do
				#echo $f 
				sbatch $f 
			done
			break;;

		3) #launcher case
			echo -e "${GREEN}Building a Trojan Horse job.${NC}"
			#make a top-level job name
			#trim $jobName of any numers/nonsense 
			numStrip=$(echo "$jobName" | sed 's/[0-9]*$//' | tr -d '[:space:]')
			launcherJobName="${numStrip}-horse"

			#get an array of jobs to make
			userRange=$(echo -e "${GREEN}Enter a # range of subjobs to include in $launcherJobName${NC}: ")
			echo -e "${RED}Don't go over 8 jobs...${NC}"
			read -ep "$userRange" jobRange
			cleanedRange=($(cleanRange $jobRange))
			#make sure the user-defined range is in ascending order
			IFS=$'\n' sortedRange=($(sort -n <<< "${cleanedRange[*]}"))
			unset IFS

			#get the base name of the job (minus any ending #s)
			#ex: job-conf1.com .. job-conf10.com <= need to pull "job-conf"
			noNum=$(echo "$jobName" | sed 's/[0-9]*$//' | tr -d '[:space:]')
			#for debug
			#echo $noNum

			#declare an array to contain jobs to add to the launcher.txt
			declare -a launchJobList

			#var to count number of jobs in sortedRange array 
			count=0			

			#make a launcher.txt file containing directives for each subjob in the user range
			for num in "${sortedRange[@]}"; do
				jobName=${noNum}${num}
				echo "mkdir $jobName && cp $jobName.com ./$jobName && cd ./$jobName && g16 <${jobName}.com> ${jobName}.log" >> $launcherJobName.txt			
				#echo "cp $jobName.com /$jobName" >> $launcherJobName.txt
				#echo "cd ./$jobName && g16 <${jobName}.com> ${jobName}.log" >> $launcherJobName.txt
				#echo "cd .." >> $launcherJobName.txt
				count=$((count+1))
			done
			
			echo -e "${CYAN}$launcherJobName${GREEN} will contain ${CYAN}$count${GREEN} jobs.${NC}"
			

                        #ask for settings for the first job
                        echo -e "\n${GREEN}Determining job parameters for ${CYAN}$launcherJobName:${NC}"
                        
			                        #use the normal queue to be safe
                        export WHICHQ=normal
                        echo -e "${GREEN}Using queue: ${CYAN}$WHICHQ${NC}"

                        #$numcore will equal the number of jobs (1 node per job)
                        export NUMCORE=$count
                        echo -e "${GREEN}Requesting ${CYAN}$NUMCORE ${GREEN}nodes.${NC}"

                        #request 64 cores * #jobs
                        export NUMTASK=$((count*64))
                        echo -e "${CYAN}$count ${GREEN}jobs will use ${CYAN}$NUMTASK ${GREEN}cores in total. ${NC}"


	                ### USER SELECTS TIME ###
        	        #hours to run
			echo -e "\n${GREEN}How long to run the job? ${NC}"
               		hoursQuestion=$(echo -e "Hours? ")
                	while [ -z "$hours" ]; do
                        	read -ep "$hoursQuestion" ans
                                	if [[ ! $ans =~ ^[0-9]+$ ]] ; then
                                        	echo -e "${RED}Error:${NC} Must enter an integer." >&2
                                	else
                                        	export hours=$ans
                                	fi
                        	done

                	minsQuestion=$(echo -e "Minutes? ")
                	while [ -z "$mins" ]; do
                        	read -ep "$minsQuestion" minutes
                                	if [[ ! $minutes =~ ^[0-9]+$ ]] ; then
                                        	echo -e "${RED}Error:${NC} Must enter an integer." >&2
                                	else
                                        	export mins=$minutes
                                	fi
                	done
                	
			echo -e "${GREEN}Requesting: ${CYAN}$hours ${GREEN}hours ${CYAN}$mins ${GREEN}minutes.${NC}\n"
                	export HOURS=${hours}
                	export MINS=${mins}
                	#debug
                	#echo "time requested: $HOURS:$MINS"

	                #store the current allocations' fairshares
        	        fsKinetics=$(fairshare | awk 'FNR == 8 {print $7}')
                	fsMech=$(fairshare | awk 'FNR == 10 {print $7}')
	                fsComp=$(fairshare | awk 'FNR == 4 {print $7}')
	                fsExcited=$(fairshare | awk 'FNR == 6 {print $7}')
	                fsSOCI=$(fairshare | awk 'FNR == 12 {print $7}')

	                # User indicates which allocation to use
	                alloQ=$(echo -e "${GREEN}Which allocation to use?$  ${NC}")
	                #can add or remove active allocations here
	                alloOptions=("($fsKinetics) Kinetics-of-selectiv" "($fsMech) Mechanistic-Studies" "($fsComp) Computational-Analys" "($fsExcited) Excited-state-reactiv"
	                "($fsSOCI) SOCI-Xmers")
	                PS3=$alloQ
        	        COLUMNS=0
	                select allocation in "${alloOptions[@]}"; do
	                        case $REPLY in
	                                1) #Kinetics-of-selectiv
        	                                export ALLOCATION='Kinetics-of-selectiv'
                	                        echo -e "${GREEN}Using allocation: ${CYAN}Kinetics-of-selectiv${NC}\n"
                        	                break;;

	                                2) #Mechanistic-Studies
        	                                export ALLOCATION='Mechanistic-Studies'
                	                        echo -e "${GREEN}Using allocation: ${CYAN}Mechanistic-Studies${NC}\n"
                        	                break;;

	                                3) #Computational-Analys
        	                                export ALLOCATION='Computational-Analys'
                	                        echo -e "${GREEN}Using allocation: ${CYAN}Computational-Analys${NC}\n"
                        	                break;;

	                                4) #Excited-state-reacti
        	                                export ALLOCATION='Excited-state-reacti'
                	                        echo -e "${GREEN}Using allocation: ${CYAN}Excited-state-reacti${NC}\n"
                        	                break;;

	                                5) #SOCI-Xmers
        	                                export ALLOCATION='SOCI-Xmers'
                	                        echo -e "${GREEN}Using allocation: ${CYAN}SOCI-Xmers${NC}\n"
                        	                break;;

	                                *) #Error Catch
        	                                echo -e "${RED}Error: ${NC} select available allocation...\n"
                	                        continue;;
                        	esac
	                done
			
			#copy all these envvar into the launcher template
			envsubst '${WHICHQ} ${HOURS} ${MINS} ${ALLOCATION} ${RETURNDIR} ${NUMCORE} ${NUMTASK}' </home1/05793/rdg758/scripts/g16_SBATCH_LAUNCHER.txt> ./$jobName
			
			#can optionally autosubmit 

			break;;
				                                
#envsubst '${WHICHQ} ${HOURS} ${MINS} ${ALLOCATION} ${RETURNDIR} ${NUMCORE} ${NUMTASK}' </home1/05793/rdg758/scripts/g16_SBATCH_template.txt> ./$jobName
                                #sendPool
 #                               launchJobList+=("$jobName")
	
	
		*) #Error Catch
			echo -e "${RED}Error: ${NC} select single job or range...\n"
			continue;;
	esac
done	
	
### Check if jobName.com already exists in jobPool directory ###
#This *should* only be the case if the job was previously sent to jobPool via pPool but has not yet been submitted by qManager
#if [ -f "${jobPool}/${noNum}.com" ]; then
#	echo ""
#	echo -e "${GREEN}${noNum}.com${NC} input file ${RED}already exists${NC} in the jobPool directory."
#	echo "Likely you've already submitted with pPool but qManager has not SBATCH'ed the job, yet."
#	userQuestion=$(echo -e "Do you want to Continue? This will ${RED}OVERWRITE${NC} ${GREEN}${noNum}.com... y/n ")
#	read -p "$userQuestion" yn
#		case $yn in
#			[Yy]* ) echo -e "${RED}OVERWRITING${NC} existing input file for ${GREEN}${noNum}.com..."
#				sendPool;
#				craftSBATCH;
#				break;; 
#			[Nn]* ) echo -e "${RED}EXITING...${NC}";
#				exit;;
#		esac
#fi

#makeSBATCH 

#echo ""
#echo $WHICHQ
#echo $NUMCORE
#echo $NUMTASK
#echo $HOURS
#echo $MINS
#echo $ALLOCATION
#echo $RETURNDIR

#envsubst '${WHICHQ} ${HOURS} ${MINS} ${ALLOCATION} ${RETURNDIR} ${NUMCORE} ${NUMTASK}' </home1/05793/rdg758/scripts/g16_SBATCH_template.txt> ./$jobName

#sendPool

#"job.log output will be sent to... directory" cue to user - want to send the .log and .chk files over to the original project directory
#can include a "submitted from" capture in the original .com transfer 
#>> append a running currentQ.txt file with this info when pPool is used


# this info needs to be assigned to each .com file sent over to jobPool/stored in some sort of .txt/array
#jobName.com	|	priority (1-3)	|	time submitted (date)	|	numCores (affects queued/run time)	|	job estimate (approx)	| 
#I think I can append the sbatch script in pPool with the startDir data to send logs back to it.

#assigning job priorities - 1-3
#if 1 => high priority - need asap, jump the queue to the top as soon as input.com sent to pPool
#if 2 => average priority - standard case, submit when possible
#if 3 => low priority, submit iff all the 1's or 2's have been submitted and the overall % queue fill is < 50%

#priority also impacts selection of allocation to use (based on fairshare) 
#ex: check allocation for user fairshare (using "fairshare" alias) 
#can limit possible allocations to conserve one for debug use


#definitely want to make the original sbatch script, here. it will be based on a sbatchtemplate stored somewhere
#Optionally can create a SBATCH submission script if the user desires
#A manually written 'for f in input{x..y}; do cp sampleScript $f; done' line might be faster for duplicate jobs
#note: it may be faster to impliment a test of the jobPool contents to check for similarity and then do the above line automatically...
#likely, use for a bit will help in deciding between these routes



