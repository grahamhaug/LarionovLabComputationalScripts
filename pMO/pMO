#!/bin/bash
#pMO
#v1.0

#GCH
#3/29/21
#Last edit: 3/31/21

#Generates high resolution mo#.cube files for user-specified orbital indices 
#Can also be used to generate sd.cub files to render images of spin density
#Use: "pMO example.log" 
#pMO expects "jobName.log" and "jobName.chk" files to exist in the current directory

### COLORS FOR FORMATTING ###
RED='\033[0;31m'
GREEN='\033[0;32m'
PURP='\033[1;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

### PRINT JOB HEADER ###
echo ""
echo "-----------------------------------------------------------------"
echo "                              pMO                                "
echo "-----------------------------------------------------------------"

#Function to parse user-specified range (ie: of molecular orbital indices)
function cleanRange {
	#Split on commas/spaces first; this chunks down into mini-ranges
	#likely fails for sequential delimiters
        #ex: "1-3,5 9-10"
        IFS=', ' read -a ranges <<< "$*"
        for range in "${ranges[@]}"; do
		IFS=- read start end <<< "$range"
                [ -z "$start" ] && continue
                [ -z "$end" ] && end=$start
                for (( i=start ; i <= end ; i++ )); do
			echo "$i"
		done
	done
}

#make sure formchk and cubegen are available
module load gaussian

### Check that the user's file exists and can be used to generate MO/SD images ###
logName=$(basename "$1" .log)

#does logName.log exist
if [[ ! -f "./${logName}.log" ]]; then
	echo -e "${CYAN}$logName.log${NC} ${RED}was not found in current directory!${NC}"
	echo -e "${RED}EXITING...\n${NC}"
        exit 0
fi

#check that logName.log contains a complete job output 
count=$(grep -c 'Normal termination' ${logName}.log)
if [[ "$count" -ge 1 ]]; then
	echo -e "\n${GREEN}pMO is working with: ${NC}${CYAN}$logName.log${NC}"
elif [[ "$count" == 0 ]]; then	
	echo -e "\n${CYAN}$logName.log${NC} ${RED} cannot be used to generate cubes!${NC}"
	echo -e "Make sure your job generates molecular orbital data."
	echo -e "${RED}EXITING...\n${NC}"
	exit 0
fi

#Check that a corresponding logName.chk file exists for the logName.log
if [[ -f "./${logName}.chk" ]]; then
	echo -e "${GREEN}Cubes will be created from:${NC} ${CYAN}$logName.fchk${NC}\n"

		if [[ -f "./${logName}.fchk" ]]; then
		echo -e "${GREEN}Verifying that a valid fchk file exists for ${CYAN}$logName.chk${NC}"
		echo -e "${CYAN}${logName}.fchk ${NC}already exists. Creating backup.bak"
		mv ./${logName}.fchk ./${logName}.fchk.bak
		formchk "${logName}".chk
		echo -e "${CYAN}$logName.fchk ${GREEN}ready!\n${NC}"
	else
		echo -e "${GREEN}Verifying that a valid fchk file exists for ${CYAN}$logName.chk${NC}"
		formchk "${logName}".chk
		echo -e "${CYAN}$logName.fchk ${GREEN}ready!\n${NC}"
	fi
else
	echo -e "${CYAN}$logName.chk${NC} ${RED} was not found in current directory!${NC}"
	echo -e "Verify that the current directory contains the .chk file for your job."
	echo -e "${RED}EXITING...\n${NC}"
	exit 0
fi

#This output will be sent to the SBATCH template
function cubeList {
	for mo in "${selectedMO[@]}"; do
        	echo $mo
	done
}

#provide user a current tally of .cubes that will be calculated
function selectedList {
	echo -e "\n${GREEN}Your current cube selection is:$NC"
	for selection in "${selectedCubes[@]}"; do
		echo $selection
	done
}
	

#make empty arrays that will be populated with user-selections
#this one for user QOL
declare -a selectedCubes
#this one includes the actual lines to be sent to the SBATCH template
declare -a selectedMO

while true; do
	options=("HOMO/LUMO" "Range of MOs" "Spin Density" "Exit")
	optionsPrompt=$(echo -e "${GREEN}What type of cube(s) to generate? ${NC}")
	PS3=$optionsPrompt
	COLUMNS=0
	select jobCase in "${options[@]}"; do
        	case $REPLY in
                	1) #HOMO/LUMO
				selectedMO+=("cubegen 0 MO=HOMO $logName.fchk $logName-homo.cube 300")
				selectedMO+=("cubegen 0 MO=LUMO $logName.fchk $logName-lumo.cube 300")
				#add this case to and print the current cube tally
				selectedCubes+=("HOMO/LUMO")				
				selectedList
	                       	break;;
	                2) #range of MOs
				#get user MOs
				userMO=$(echo -e "\nSpecify MOs of interest (ex: 30-33,37-42). \n${CYAN}Enter range: ${NC}")
				read -ep "$userMO" capMO
				cleanedMO=($(cleanRange $capMO))
				#make sure the user-defined fragment is in ascending order
				IFS=$'\n' moRange=($(sort -n <<< "${cleanedMO[*]}"))
				unset IFS

				#make a cubegen for each index specified by user in $moRange			
				for subs in "${moRange[@]}"; do 
					selectedMO+=("cubegen 0 MO=$subs $logName.fchk $logName-mo$subs.cube 300")
				done
				#add this case to and print the current cube tally
				for range in "${moRange[@]}"; do
					selectedCubes+=("MO# $range")
				done 
				selectedList
				break;;

	                3) #Spin Density
				selectedMO+=("cubegen 0 spin=scf $logName.fchk $logName-sd.cube 300")
				#add this case to and print the current cube tally
				selectedCubes+=("Spin Density")
				selectedList
				break;;

	                4) #exit
				echo -e "${RED}EXITING...\n${NC}"
				exit;;
			*) #error catch
				echo -e "${RED}Enter 1-4..."
				continue;;
		esac
	done
		
	repeatQ=$(echo -e "\n${GREEN}Add additional cubes?${NC} (y/n) ")
	read -ep "$repeatQ" yn 
		case $yn in
			[Yy]* ) continue ;;
			[Nn]* ) break ;;
			* )
				echo -e "${RED}Enter y/n...\n${NC}"
				continue;;
		esac
done

#ask user to confirm selection
echo -e "\n${GREEN}Please confirm your selection before job submission: ${NC}"
for selection in "${selectedCubes[@]}"; do
                echo $selection
done

while true; do
userConfirm=$(echo -e "${GREEN}Confirmed? (y/n) ${NC}")
read -ep "$userConfirm" yn
	case $yn in
		[Yy]* ) break ;;
		[Nn]* )
			echo -e "${RED}EXITING...\n${NC}"
			exit;;
		* ) 
			echo -e "${RED}Enter y/n...\n${NC}"
			continue;;
	esac 
done

#this is a debug check to make sure everything is included correctly
#echo -e "\n${CYAN}these will be sent to SBATCH: ${NC}"
#cubeList

### Prepare the SBATCH template ###
echo -e "\n${GREEN}Generating SBATCH template: ${CYAN}$logName-mo${NC}" 

#find out how many hours to run the job
hoursQuestion=$(echo -e "${GREEN}How many hours? ${NC}")
while [ -z "$hours" ]; do
	read -ep "$hoursQuestion" ans	
		if [[ ! $ans =~ ^[0-9]+$ ]] ; then
			echo -e "${RED}Error:${NC} Must enter an integer." >&2
		else 
			export hours=$ans
		fi
done

### Prepare the MO SBATCH template ### 
export HOURS=${hours}
export CUBES=$(printf '%s\n' "${selectedMO[@]}")
#substitute these into the template 
envsubst '${HOURS} ${CUBES}"' </home1/05793/rdg758/scripts/pMO_SBATCH_template.txt> ./$logName-mo

#ask user if it's time to submit
### OPTIONAL IMMEDIATE JOB SUBMISSION WITH SLURM ###
echo ""
while true; do
        slurmQuestion=$(echo -e "${GREEN}Submit ${CYAN}$logName-mo ${GREEN}now?${NC} y/n ")
        read -p "$slurmQuestion" yn
        case $yn in
                [Yy]* ) echo -e "${GREEN}Submitting ${CYAN}$logName-mo ${GREEN}to TACC...${NC}"
                        sbatch "./$logName-mo"
                        break;;
                [Nn]* ) echo -e "${RED}EXITING...${NC}";
                        exit;;
		* ) echo -e "${RED}Enter (y/n)...${NC}";
			continue;;
        esac
done


