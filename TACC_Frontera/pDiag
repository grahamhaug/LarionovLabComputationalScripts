#pDiag
#v1.1
#GCH - 3/2/21
#last edited: 4/2/21

#Extracts E(SCF) and thermodynamic data from opt/freq G16 jobs
#Prints the final optimized geometry from .log files

#Determine the name of the input.log - print it at the top of the output
outputName=$(basename "$1" .log)
echo "$outputName"

####    CAPTURE CALCULATION PARAMETERS  ####
#capture the functional/basis set
functional=$(grep '#p' $1 | head -1 | awk '{print $2}')

#capture the dispersion model, if used
dispersion=$(grep 'empiricaldispersion' $1 | head -1 | sed -n 's/^.*\(empiricaldispersion=[a-zA-Z0-9]*\).*$/\1/p')

#capture the solvent type used
solvation=$(grep 'Solvent' $1 | head -1 | sed -n -e 's/^.*:\( [a-zA-Z0-9,-]*\), .*$/\1/p')
#check if SMD or PCM was used
scrfcap=$(grep 'Atomic radii      ' $1 | head -1 | sed -n -e 's/^.*: \([a-zA-Z]*\)..*$/\1/p')
if [ ! -z "$solvation" ]; then
        if [ $scrfcap == "SMD" ]; then
                smodel="SMD"
        elif [ $scrfcap == "UFF" ]; then
                smodel="PCM"
        fi
fi

####    OUTPUT CALCULATION PARAMETERS   ####
#output functional/basis set
echo "$functional"

#if dispersion was used in the .log, print which version
if [ ! -z "$dispersion" ]; then
        echo "$dispersion"
fi

#if solvation was used, print the solvent and the model
if [ ! -z "$solvation" ]; then
        echo "Solvation =$solvation, $smodel"
fi

#print the SCF energy in Hartree
echo ""
awk '/Charge =/,/GINC/ {print}' $1 > selection
awk '/A.U. after/ {print $3,$4,$5}' selection > energy
tail -1 energy

#print the enthalphy
enthalpy=$(grep 'Sum of electronic and thermal Enthalpies' $1 | sed -n -e 's/^.*\(-[0-9]*.[0-9]*\).*$/\1/p')
echo "Enthalpy = $enthalpy"

#print the free energy
gibbs=$(grep 'Sum of electronic and thermal Free Energies' $1 | sed -n -e 's/^.*\(-[0-9]*.[0-9]*\).*$/\1/p')
echo "Gibbs = $gibbs"

####    GoodVibes Section       ####
#Run GV for corrected values - only if thermo data is present
if [ ! -z "$enthalpy" ]; then
        (python -m goodvibes $1 -f 50.0) > goodvibesOut
        #prints the "structure" line from GV
	awk '/Structure/,/"$outputName"/ {print}' goodvibesOut > gv50raw
	gv50=$(grep 'o' gv50raw | awk '{print $9}')
	#print GV qh-G(T) with cutoff of 50 cm-1
	echo "GV50 = $gv50"
	#print GV qh-G(T) with cutoff of 100 cm-1
        (python -m goodvibes $1 -f 50.0 -c 1) > goodvibes100Out
	awk '/Structure/,/"$outputName"/ {print}' goodvibes100Out > gv100raw
        gv100=$(grep 'o' gv100raw | awk '{print $9}')
        #print GV qh-G(T) with cutoff of 100 cm-1
        echo "GV1M = $gv100"
        
fi
echo ""

#print the charge and multiplicity
multiplicity=$(grep 'Charge =' $1 | head -1 | sed -n 's/ \+/ /gp')
echo "$multiplicity" | sed -e 's/Charge/       Charge/' | sed -e 's/Multiplicity/      Multiplicity/'

#Get line numbers for Start/Stop of the geometry section(s)
#pull out the line numbers for "Redundant internal coordinates" - start lines for geometries in .log files
startGeom=$(awk '/Redundant internal/ {print FNR}' selection | tr '\n\r' ' ')
#save these into an array
IFS=' ' read -r -a startArray <<< "$startGeom"
#pull out the line numbers for "Redundant internal coordinates" - start lines for geometries in .log files
endGeom=$(awk '/Recover conn/ {print FNR}' selection| tr '\n\r' ' ')
#save these into an array
IFS=' ' read -r -a endArray <<< "$endGeom"

#make variables to count the number of elements in each array
startCount="${#startArray[@]}"
endCount="${#endArray[@]]}"

#pass the last start/stop lines - the last geometry match - to these variables for reading into awk
if [[ "$startCount" -eq 0 || -z "$startCount" ]]; then
        #echo "case 1"
        inputGeom=$(awk '/Charge =/,/ITRead=/' $1 | head -n -2 | tail -n+2)
	echo "Single point geometry:"
        echo "$inputGeom"
elif [ "$startCount" -eq 1 ] && [ "$endCount" = 1 ]; then
        #set the line numbers of finalStart/End to the only values
        #echo "case 2"
        finalStart=${startGeom}
        finalEnd=${endGeom}
else
        #if there are more than 1 start/stop counted, choose the last line numbers for each
        #echo "case 3"
        finalStart=${startArray[-1]}
        finalEnd=${endArray[-1]}
fi

#pull out the geometry and format it in .xyz format - tab separated
if [ "$startCount" -ne 0 ]; then
        awk "NR==$finalStart,NR==$finalEnd" selection | head -n -1 | tail -n +2 > tempGeom
	#awk "NR==$finalStart,NR==$finalEnd" selection > tempGeom
        finalGeom=$(awk -F ',' '{printf "%-4s %15.10f %15.10f %15.10f\n", $1, $3, $4, $5}' tempGeom | sed -e '/^[^0-9]*$/d')
	#finalGeom=$(awk -F ',' '{printf "%-5s %-15s %-15s %-15s \n", $1, $3, $4, $5}' tempGeom |  sed -e '/^[^0-9]*$/d')
        echo "$finalGeom"
fi

echo ""

#file cleanup
rm -rf selection energyblock energy energyblock tempGeom goodvibesOut gv50raw Goodvibes_output.dat gv100raw goodvibes100Out fort.7



